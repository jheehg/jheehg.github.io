{
    "version": "https://jsonfeed.org/version/1",
    "title": "jheehg blog",
    "home_page_url": "/",
    "feed_url": "/feed.json",
    "description": "jheehg blog",
    "icon": "/apple-touch-icon.png",
    "favicon": "/favicon.ico",
    "expired": false,
    
    "author": "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}",
    
"items": [
    
        {
            "id": "/2022/08/15/deploy-with-github-actions",
            "title": "github actions으로 jekyll 수동 배포",
            "summary": "github actions으로 jekyll 수동 배포를 위한 글입니다.",
            "content_text": "github actions로 배포하게 된 이유jekyll 에서는 카테고리나 태그 같은 기능을 사용자가 직접 플러그인을 생성해서 사용할 수 있게 하는데 github-pages 로 자동 배포하게 될 경우 커스텀 플러그인을 사용할 수 없게 된다.아래 jekyll 공식 docs에서 github actions과 plugin에 관련된 설명이다.When building a Jekyll site with GitHub Pages, the standard flow is restricted for securityreasons and to make it simpler to get a site setup. For more control over the build and still host the site with GitHub Pages you can use GitHub Actions.Plugins — You can use any Jekyll plugins irrespective of them being on the supportedversions list, even *.rb files placed in the _plugins directory of your site.이로 인해 category 플러그인 생성 후 실제 배포를 하면 /tag/*, /category/* 가404 not found 페이지로 이동했다. (아래와 같이 _plugins  에서 tags는 가져왔던 테마에 원래 있었고 category는 새로 생성한 상태였다.)구글링을 통해 현재 상태에서 해결할 수 있는 방법을 찾았으나 실패했다.master 브랜치에 .nojekyll 파일을 _site 폴더와 같이 커밋해서 배포하는 방법..?github actions에서 새 workflow 생성workflow 파일의 경우 github actions 에서 제공하는 것도 있고 marketplace에서 찾을 수도 있는데나는 아래 github에 예시와 jekyll을 수동 배포한 다른 블로그 글들을 보고 참고해서 작성했다.https://github.com/helaili/jekyll-actionworkflow 배포하면서 실패했던 원인들을 정리해보기name: Build and deploy Jekyll site to GitHub Pageson:  push:    branches:      - masterjobs:  github-pages:    runs-on: ubuntu-latest    steps:      - uses: actions/checkout@v2      - uses: actions/cache@v2        with:          path: vendor/bundle          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile') }}          restore-keys: |            ${{ runner.os }}-gems-      - uses: helaili/jekyll-action@2.0.5    # Choose any one of the Jekyll Actions        with:          target_branch: 'gh-pages'        env:                                # Some relative inputs of your action          JEKYLL_PAT: ${{ secrets.JEKYLL_PAT }}🔗 target_branch 를 gh_pages 로 지정해주어야 _site 디렉토리 안에 정적파일들이 해당 브런치에 생성된다.🔗 workflow에 secrtes 지정할 때 key, value값 주의하기PAT 추가해주는 부분에 key값을 어떻게 입력해야 될지 확실하지 않아서 이 부분에서 여러번 배포를 실패했다. PAT 키 생성과 input입력은 아래 과정과 같이 해결했다.       레파지토리에서 settings 탭으로 이동한다.        Security 탭에서 Action 탭으로 이동한다.        Repository secrets에 토큰 값을 추가해준다. 이 토큰 값은 github 개인 설정 페이지에서 Developer settings - Personal access tokens 에서 생성 해준 값을 사용한다.        workflow file에 Repository secrets input으로 key값과 value값은 각각  JEKYLL_PAT, ${{ secrets.JEKYLL_PAT }} 으로 넣어준다. secrets 명은 임의로 생성한다.  아래는 github actions workflow security guide 관련 문서인데 secrets 생성하는 규칙이 나와있다. https://docs.github.com/en/actions/security-guides/encrypted-secrets 🔗 배포 소스 파일의 브랜치 설정을 gh-pages 로 지정하기      레파지토리의 settings 탭에서 Pages 페이지로 이동한다.        Build and deployment 에서 branch 지정을 master에서 gh-pages로 변경해준다.  아래 블로그 글에 해당 내용이 잘 나와 있다.https://bitbra.in/2021/10/03/host-your-own-blog-for-free-with-custom-domain.html추가로 더 알아봐야 할 내용들github-pages에서 자동배포 되는 action이 수동으로 생성한 action과 중복해서 실행되고 있는데 수동으로 생성한 workflow만 실행되게 할 수 있을지 알아보려고 한다.github actions 참고 자료https://docs.github.com/en/actionshttps://jekyllrb.com/docs/continuous-integration/github-actions/#advantages-of-using-actions",
            "content_html": "<p><br /></p><h3 id=\"github-actions로-배포하게-된-이유\">github actions로 배포하게 된 이유</h3><hr /><p>jekyll 에서는 카테고리나 태그 같은 기능을 사용자가 직접 플러그인을 생성해서 사용할 수 있게 하는데 <br /><code class=\"language-plaintext highlighter-rouge\">github-pages</code> 로 자동 배포하게 될 경우 커스텀 플러그인을 사용할 수 없게 된다.<br /></p><p>아래 jekyll 공식 docs에서 github actions과 plugin에 관련된 설명이다.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>When building a Jekyll site with GitHub Pages, the standard flow is restricted for securityreasons and to make it simpler to get a site setup. For more control over the build and still host the site with GitHub Pages you can use GitHub Actions.Plugins — You can use any Jekyll plugins irrespective of them being on the supportedversions list, even *.rb files placed in the _plugins directory of your site.</code></pre></div></div><p><br />이로 인해 <code class=\"language-plaintext highlighter-rouge\">category</code> 플러그인 생성 후 실제 배포를 하면 <code class=\"language-plaintext highlighter-rouge\">/tag/*</code>, <code class=\"language-plaintext highlighter-rouge\">/category/*</code> 가<code class=\"language-plaintext highlighter-rouge\">404 not found</code> 페이지로 이동했다. <br />(아래와 같이 <code class=\"language-plaintext highlighter-rouge\">_plugins</code>  에서 tags는 가져왔던 테마에 원래 있었고 category는 새로 생성한 상태였다.)</p><p><img width=\"300\" alt=\"jekyll_plugins\" src=\"https://user-images.githubusercontent.com/56527636/184523048-6270d2f0-7fa6-4a9d-b4ca-1ea062f06c8f.png\" /></p><p>구글링을 통해 현재 상태에서 해결할 수 있는 방법을 찾았으나 실패했다.</p><s>master 브랜치에 .nojekyll 파일을 _site 폴더와 같이 커밋해서 배포하는 방법..?</s><p><br /><br /></p><h3 id=\"github-actions에서-새-workflow-생성\">github actions에서 새 workflow 생성</h3><hr /><p>workflow 파일의 경우 github actions 에서 제공하는 것도 있고 marketplace에서 찾을 수도 있는데<br />나는 아래 github에 예시와 jekyll을 수동 배포한 다른 블로그 글들을 보고 참고해서 작성했다.<br /><a href=\"https://github.com/helaili/jekyll-action\">https://github.com/helaili/jekyll-action</a></p><p><br /></p><h3 id=\"workflow-배포하면서-실패했던-원인들을-정리해보기\">workflow 배포하면서 실패했던 원인들을 정리해보기</h3><div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Build and deploy Jekyll site to GitHub Pages</span><span class=\"na\">on</span><span class=\"pi\">:</span>  <span class=\"na\">push</span><span class=\"pi\">:</span>    <span class=\"na\">branches</span><span class=\"pi\">:</span>      <span class=\"pi\">-</span> <span class=\"s\">master</span><span class=\"na\">jobs</span><span class=\"pi\">:</span>  <span class=\"na\">github-pages</span><span class=\"pi\">:</span>    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>    <span class=\"na\">steps</span><span class=\"pi\">:</span>      <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v2</span>      <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/cache@v2</span>        <span class=\"na\">with</span><span class=\"pi\">:</span>          <span class=\"na\">path</span><span class=\"pi\">:</span> <span class=\"s\">vendor/bundle</span>          <span class=\"na\">key</span><span class=\"pi\">:</span> <span class=\"s\">${{ runner.os }}-gems-${{ hashFiles('**/Gemfile') }}</span>          <span class=\"na\">restore-keys</span><span class=\"pi\">:</span> <span class=\"pi\">|</span>            <span class=\"s\">${{ runner.os }}-gems-</span>      <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">helaili/jekyll-action@2.0.5</span>    <span class=\"c1\"># Choose any one of the Jekyll Actions</span>        <span class=\"na\">with</span><span class=\"pi\">:</span>          <span class=\"na\">target_branch</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">gh-pages'</span>        <span class=\"na\">env</span><span class=\"pi\">:</span>                                <span class=\"c1\"># Some relative inputs of your action</span>          <span class=\"na\">JEKYLL_PAT</span><span class=\"pi\">:</span> <span class=\"s\">${{ secrets.JEKYLL_PAT }}</span></code></pre></div></div><p><br /></p><h4 id=\"-target_branch-를-gh_pages-로-지정해주어야-_site-디렉토리-안에-정적파일들이-해당-브런치에-생성된다\">🔗 target_branch 를 <code class=\"language-plaintext highlighter-rouge\">gh_pages</code> 로 지정해주어야 <code class=\"language-plaintext highlighter-rouge\">_site</code> 디렉토리 안에 정적파일들이 해당 브런치에 생성된다.</h4><h4 id=\"-workflow에-secrtes-지정할-때-key-value값-주의하기\">🔗 workflow에 secrtes 지정할 때 key, value값 주의하기</h4><p>PAT 추가해주는 부분에 key값을 어떻게 입력해야 될지 확실하지 않아서 이 부분에서 여러번 배포를 실패했다. <br />PAT 키 생성과 input입력은 아래 과정과 같이 해결했다. <br /><br /></p><ul>  <li>    <p>레파지토리에서 settings 탭으로 이동한다.<br /><br /><img width=\"800\" alt=\"repo_settings\" src=\"https://user-images.githubusercontent.com/56527636/184523331-a61d8264-1077-4ebc-8e21-0546c6102fb4.png\" /><br /><br /><br /></p>  </li>  <li>    <p>Security 탭에서 Action 탭으로 이동한다.<br /><br /><img width=\"280\" alt=\"security_page\" src=\"https://user-images.githubusercontent.com/56527636/184523358-986607ad-31e0-4a2e-9c9f-62421d5276ab.png\" /><br /><br /><br /></p>  </li>  <li>    <p>Repository secrets에 토큰 값을 추가해준다. <br />이 토큰 값은 github 개인 설정 페이지에서 Developer settings - Personal access tokens 에서 생성 해준 값을 사용한다.<br /><br /><img width=\"650\" alt=\"repo_secrets\" src=\"https://user-images.githubusercontent.com/56527636/184523439-19ee3b91-c157-475b-a4b3-ded07d11d55a.png\" /><br /><br /><br /></p>  </li>  <li>    <p>workflow file에 Repository secrets input으로 key값과 value값은 각각 <br /> <code class=\"language-plaintext highlighter-rouge\">JEKYLL_PAT</code>, <code class=\"language-plaintext highlighter-rouge\">${{ secrets.JEKYLL_PAT }}</code> 으로 넣어준다. secrets 명은 임의로 생성한다.<br /></p>  </li></ul><p>아래는 github actions workflow security guide 관련 문서인데 secrets 생성하는 규칙이 나와있다. <br /><a href=\"https://docs.github.com/en/actions/security-guides/encrypted-secrets\">https://docs.github.com/en/actions/security-guides/encrypted-secrets</a> <br /><br /><br /><br /></p><h4 id=\"-배포-소스-파일의-브랜치-설정을-gh-pages-로-지정하기\">🔗 배포 소스 파일의 브랜치 설정을 <code class=\"language-plaintext highlighter-rouge\">gh-pages</code> 로 지정하기</h4><ul>  <li>    <p>레파지토리의 settings 탭에서 <code class=\"language-plaintext highlighter-rouge\">Pages</code> 페이지로 이동한다.<br /><br /><img width=\"280\" alt=\"pages\" src=\"https://user-images.githubusercontent.com/56527636/184597903-ff99a5f1-3fea-4329-ace1-b87f86fba142.png\" /><br /><br /><br /></p>  </li>  <li>    <p>Build and deployment 에서 branch 지정을 <code class=\"language-plaintext highlighter-rouge\">master</code>에서 <code class=\"language-plaintext highlighter-rouge\">gh-pages</code>로 변경해준다.<br /><br /><img width=\"700\" alt=\"build-branch\" src=\"https://user-images.githubusercontent.com/56527636/184597964-1aa61cd3-434c-464f-83ed-d247b4e595fa.png\" /><br /></p>  </li></ul><p>아래 블로그 글에 해당 내용이 잘 나와 있다.<br /><a href=\"https://bitbra.in/2021/10/03/host-your-own-blog-for-free-with-custom-domain.html\">https://bitbra.in/2021/10/03/host-your-own-blog-for-free-with-custom-domain.html</a><br /><br /></p><h3 id=\"추가로-더-알아봐야-할-내용들\">추가로 더 알아봐야 할 내용들</h3><p><code class=\"language-plaintext highlighter-rouge\">github-pages</code>에서 자동배포 되는 action이 수동으로 생성한 action과 중복해서 실행되고 있는데 <br />수동으로 생성한 workflow만 실행되게 할 수 있을지 알아보려고 한다.</p><p><br /><br /><br /></p><h4 id=\"github-actions-참고-자료\">github actions 참고 자료</h4><p><a href=\"https://docs.github.com/en/actions\">https://docs.github.com/en/actions</a><br /><a href=\"https://jekyllrb.com/docs/continuous-integration/github-actions/#advantages-of-using-actions\">https://jekyllrb.com/docs/continuous-integration/github-actions/#advantages-of-using-actions</a></p>",
            "url": "/2022/08/15/deploy-with-github-actions",
            
            
            
            "tags": ["jekyll","github actions"],
            
            "date_published": "2022-08-15T00:00:00+00:00",
            "date_modified": "2022-08-15T00:00:00+00:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "/2022/07/31/tutorial-for-gitblog",
            "title": "github blog 생성해보기",
            "summary": "github blog를 생성해보는 과정을 적은 포스트입니다.",
            "content_text": "github blog 생성개발블로그 시작을 그렇게도 망설이고 미뤘는데 이왕이면 블로그 생성, 운영 하면서 겪는 경험도도움이 많이 될 것 같아 얼레벌레 시작하게 된 블로그.욕심 부리지 않고 천천히 배워볼 예정이다. 👏  레파지토리 생성github-pages 배포를 위해 반드시 아래 규칙을 따라 레파지토리를 생성해야 한다.username.github.io      맘에드는 jekyll theme 을 적용하기무료테마를 고른 후, git clone 하여 일단 테마의 모든 내용을 내 깃헙 블로그 레파지토리 디렉토리로 옮기는 것으로 시작한다. 다 옮겼다면 커밋, 푸시를 한다.        1~3분 정도 지나면 커밋된 레파지토리 변경 내용이 github-pages 를 통해 배포가 되어있고, username.github.io 로 들어가서 배포된 사항을 확인할 수 있다.        로컬에서 블로그를 실행하려면 다음과 같은 과정이 필요하다고 한다.jekyll 과 ruby 설치가 필요한데, mac OS 환경의 설치 방법은 다음 doc을 참고하였다.https://jekyllrb-ko.github.io/docs/installation/macos/  로컬설치 참고rbenv 를 통해 ruby 를 설치하면 프로젝트마다 여러 버전을 설치할 수 있다고 하는데성격 급한 나머지 이 내용을 못보고 ruby를 설치해버린 나..근데 ruby 를 평소에 배워본적도 사용해본적도 없는 상태이므로 일단은 나중에 필요하면 설치하도록 하고 다음단계로 넘어갔다.로컬에서 실행해보려고 했는데 여기서 몇 가지 문제점들이 발생했다.  bundler, bundle은 무엇인가? 😂 npm 같은 존재인가..  Gemfile 에 적용된 gem들의 버전이 다 deprecated 된 상태라 도통 실행이 되질 않는다.  2번의 문제를 해결하면 실행은 할 수 있을 것 같은데 오늘 처음 본 bundle, gem…. 하아…^^해결 방법  bundle update --bundler 를 통해 bundler 버전을 업데이트 해주었다.Gemfile에 적용된 버전은 지원하지 않는 버전인데 무슨 버전으로 업데이트 해야할지 몰라서 latest 로 설치했다.  bundle outdated 하면 현재 쓰는 gem 중에서 업데이트 대상에 속하는 gem 들을 알려주는데 뭐가 뭔지도 모르겠고 거의 모든 gem이 outdated 상태여서 모든 gem을 다 업데이트 해주기로 했다.  bundle update --all 로 outdated 된 gem을 모두 업데이트 해준다.  1~3번까지 모두 했는데도 또 오류가 난다. ^^  오류 로그를 보니 webrick 파일을 로드할 수 없다는 내용이었다. 음….   구글링을 해보면 webbrick 또한 설치를 해주면 된다고 하니, bundle add webrick 로 설치를 진행한다.🔗 webrick이란? https://github.com/ruby/webrick   bundle exec jekyll serve 로 서버를 실행한 후 localhost:4000 으로 접속하면 로컬 실행이 마무리 된다.이제 하나하나 커스텀하는 과정은 아래 리소스를 참고해서 진행할 예정이다.https://jekyllrb-ko.github.io https://bundler.io",
            "content_html": "<h3 id=\"github-blog-생성\">github blog 생성</h3><p>개발블로그 시작을 그렇게도 망설이고 미뤘는데 이왕이면 블로그 생성, 운영 하면서 겪는 경험도도움이 많이 될 것 같아 얼레벌레 시작하게 된 블로그.<br />욕심 부리지 않고 천천히 배워볼 예정이다. 👏<br /><br /></p><ul>  <li>레파지토리 생성<br /><code class=\"language-plaintext highlighter-rouge\">github-pages</code> 배포를 위해 반드시 아래 규칙을 따라 레파지토리를 생성해야 한다.</li></ul><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>username.github.io</code></pre></div></div><ul>  <li>    <p>맘에드는 <code class=\"language-plaintext highlighter-rouge\">jekyll theme</code> 을 적용하기<br />무료테마를 고른 후, <code class=\"language-plaintext highlighter-rouge\">git clone</code> 하여 일단 테마의 모든 내용을 내 깃헙 블로그 레파지토리 디렉토리로 옮기는 것으로 시작한다. 다 옮겼다면 커밋, 푸시를 한다.</p>  </li>  <li>    <p>1~3분 정도 지나면 커밋된 레파지토리 변경 내용이 <code class=\"language-plaintext highlighter-rouge\">github-pages</code> 를 통해 배포가 되어있고, <code class=\"language-plaintext highlighter-rouge\">username.github.io</code> 로 들어가서 배포된 사항을 확인할 수 있다.</p>  </li>  <li>    <p>로컬에서 블로그를 실행하려면 다음과 같은 과정이 필요하다고 한다.<br /><code class=\"language-plaintext highlighter-rouge\">jekyll</code> 과 <code class=\"language-plaintext highlighter-rouge\">ruby</code> 설치가 필요한데, mac OS 환경의 설치 방법은 다음 doc을 참고하였다.<br /><a href=\"https://jekyllrb-ko.github.io/docs/installation/macos/\">https://jekyllrb-ko.github.io/docs/installation/macos/</a></p>  </li></ul><p><br /></p><h3 id=\"로컬설치-참고\">로컬설치 참고</h3><p><code class=\"language-plaintext highlighter-rouge\">rbenv</code> 를 통해 <code class=\"language-plaintext highlighter-rouge\">ruby</code> 를 설치하면 프로젝트마다 여러 버전을 설치할 수 있다고 하는데<br />성격 급한 나머지 이 내용을 못보고 <code class=\"language-plaintext highlighter-rouge\">ruby</code>를 설치해버린 나..<br />근데 <code class=\"language-plaintext highlighter-rouge\">ruby</code> 를 평소에 배워본적도 사용해본적도 없는 상태이므로 일단은 나중에 필요하면 설치하도록 하고 다음단계로 넘어갔다.<br /><br /></p><p>로컬에서 실행해보려고 했는데 여기서 몇 가지 문제점들이 발생했다.<br /><br /></p><ol>  <li>bundler, bundle은 무엇인가? 😂 npm 같은 존재인가..</li>  <li>Gemfile 에 적용된 gem들의 버전이 다 deprecated 된 상태라 도통 실행이 되질 않는다.</li>  <li>2번의 문제를 해결하면 실행은 할 수 있을 것 같은데 오늘 처음 본 bundle, gem…. 하아…^^</li></ol><p><br />해결 방법<br /></p><ol>  <li><code class=\"language-plaintext highlighter-rouge\">bundle update --bundler</code> 를 통해 bundler 버전을 업데이트 해주었다.<br />Gemfile에 적용된 버전은 지원하지 않는 버전인데 무슨 버전으로 업데이트 해야할지 몰라서 latest 로 설치했다.<br /><br /></li>  <li><code class=\"language-plaintext highlighter-rouge\">bundle outdated</code> 하면 현재 쓰는 gem 중에서 업데이트 대상에 속하는 gem 들을 알려주는데 뭐가 뭔지도 모르겠고 거의 모든 gem이 outdated 상태여서 모든 gem을 다 업데이트 해주기로 했다.<br /><br /></li>  <li><code class=\"language-plaintext highlighter-rouge\">bundle update --all</code> 로 outdated 된 gem을 모두 업데이트 해준다.<br /><br /></li>  <li>1~3번까지 모두 했는데도 또 오류가 난다. ^^<br /><br /></li>  <li>오류 로그를 보니 webrick 파일을 로드할 수 없다는 내용이었다. 음….<br /><br /><img width=\"720\" alt=\"webbrick-cannot-load-error\" src=\"https://user-images.githubusercontent.com/56527636/182014515-7acd4add-9b23-4760-ae63-6a2f49ca22b4.png\" /> <br /><br /></li>  <li>구글링을 해보면 <code class=\"language-plaintext highlighter-rouge\">webbrick</code> 또한 설치를 해주면 된다고 하니, <code class=\"language-plaintext highlighter-rouge\">bundle add webrick</code> 로 설치를 진행한다.<br />🔗 webrick이란? <a href=\"https://github.com/ruby/webrick\">https://github.com/ruby/webrick</a> <br /><br /></li>  <li><code class=\"language-plaintext highlighter-rouge\">bundle exec jekyll serve</code> 로 서버를 실행한 후 <code class=\"language-plaintext highlighter-rouge\">localhost:4000</code> 으로 접속하면 로컬 실행이 마무리 된다.<br /><img width=\"720\" alt=\"jekyll-serve\" src=\"https://user-images.githubusercontent.com/56527636/182014485-6e044f84-3e46-4832-ace4-7cd1565b8955.png\" /></li></ol><p><br /><br /></p><p>이제 하나하나 커스텀하는 과정은 아래 리소스를 참고해서 진행할 예정이다.<br /><a href=\"https://jekyllrb-ko.github.io\">https://jekyllrb-ko.github.io</a> <br /><a href=\"https://bundler.io\">https://bundler.io</a></p>",
            "url": "/2022/07/31/tutorial-for-gitblog",
            
            
            
            "tags": ["jekyll","gitblog","ruby","bundle"],
            
            "date_published": "2022-07-31T00:00:00+00:00",
            "date_modified": "2022-07-31T00:00:00+00:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "/2022/07/31/test",
            "title": "blog post 테스트 글입니다.",
            "summary": "blog post 테스트 글입니다.",
            "content_text": "테스트입니다.test",
            "content_html": "<p>테스트입니다.test</p>",
            "url": "/2022/07/31/test",
            
            
            
            "tags": ["jekyll","coding"],
            
            "date_published": "2022-07-31T00:00:00+00:00",
            "date_modified": "2022-07-31T00:00:00+00:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        }
    
    ]
}